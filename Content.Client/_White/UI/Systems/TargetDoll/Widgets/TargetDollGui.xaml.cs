using System.Linq;
using Content.Shared._White.TargetDoll;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._White.UI.Systems.TargetDoll.Widgets;

[GenerateTypedNameReferences]
public sealed partial class TargetDollGui : UIWidget
{
    private readonly TargetDollUIController _controller;
    private readonly Dictionary<BodyPart, TextureButton> _bodyParts;

    public TargetDollGui()
    {
        RobustXamlLoader.Load(this);
        LayoutContainer.SetGrowVertical(this, LayoutContainer.GrowDirection.Begin);

        _controller = UserInterfaceManager.GetUIController<TargetDollUIController>();

        _bodyParts = new Dictionary<BodyPart, TextureButton>
        {
            { BodyPart.Head, HeadButton },
            { BodyPart.Chest, ChestButton },
            { BodyPart.Groin, GroinButton },
            { BodyPart.LeftArm, LeftArmButton },
            { BodyPart.LeftHand, LeftHandButton },
            { BodyPart.RightArm, RightArmButton },
            { BodyPart.RightHand, RightHandButton },
            { BodyPart.LeftLeg, LeftLegButton },
            { BodyPart.LeftFoot, LeftFootButton },
            { BodyPart.RightLeg, RightLegButton },
            { BodyPart.RightFoot, RightFootButton },
            { BodyPart.Eyes, EyesButton },
            { BodyPart.Mouth, MouthButton },
        };

        foreach (var bodyPartButton in _bodyParts)
        {
            bodyPartButton.Value.MouseFilter = MouseFilterMode.Stop;
            bodyPartButton.Value.OnPressed += _ => SetActiveBodyPart(bodyPartButton.Key);
        }

        TargetDoll.Texture = Theme.ResolveTexture("target_doll");
    }

    private void SetActiveBodyPart(BodyPart bodyPart)
    {
        _controller.CycleTarget(bodyPart);
    }

    public void SetBodyPartsVisible(BodyPart bodyPart)
    {
        foreach (var bodyPartButton in _bodyParts)
        {
            bodyPartButton.Value.Children.First().Visible = bodyPartButton.Key == bodyPart;
        }
    }

    public void SetTargetDollVisible(bool visible)
    {
        Visible = visible;
    }

    protected override void OnThemeUpdated()
    {
        TargetDoll.Texture = Theme.ResolveTexture("target_doll");
    }
}

